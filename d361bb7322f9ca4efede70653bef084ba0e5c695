{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "94cbd338_f2d1ecde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-03T13:30:06Z",
      "side": 1,
      "message": "DBus is an API to other processes.  What does it mean for an interface to be \"Internal\" given that definition?  I don\u0027t think we should do that.\n\nFurther, I think introducing the entire p-d-i code generation process to the building of this repository is a step backwards.  Just add your interface to PDI and drop \"Internal\" from the name.",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12f20de5_10ed3270",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-03T13:47:30Z",
      "side": 1,
      "message": "Hasn\u0027t this been the convention in other repositories where they want a way to trigger between two applications (or a library and application) in the same repository without exposing a public API?\n\nhttps://github.com/openbmc/phosphor-debug-collector/blob/ff92ffe29db4099fa44864fc22f40843f4ca1834/xyz/openbmc_project/Dump/Internal/Create.interface.yaml\n\nhttps://github.com/openbmc/phosphor-logging/blob/fdd1dc04b56160f03ca774c92c7af92d3dbd24d3/yaml/xyz/openbmc_project/Logging/Internal/Manager.interface.yaml",
      "parentUuid": "94cbd338_f2d1ecde",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf416bfc_bdb744ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-03T13:53:00Z",
      "side": 1,
      "message": "A DBus API is by definition public.\n\nIt was a convention long ago.  Is it still?  I\u0027m not sure.  I certainly don\u0027t advocate for it.\n\nWhy can\u0027t things other than udev add LEDs?",
      "parentUuid": "12f20de5_10ed3270",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22b846e1_e38a3253",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-03T14:14:01Z",
      "side": 1,
      "message": "\u003e A DBus API is by definition public.\n\nIt is public in the sense that anyone _could_ make calls to it, but if it is left undocumented and named as \"Internal\" it seems rather unlikely (and something we should be screening for in a code review).\n\n\u003e Why can\u0027t things other than udev add LEDs?\n\nWhat other entity than udev would indicate that a new sysfs entry exists and should be managed by this application?  That\u0027s exactly what udev does.  I can\u0027t even think of a way you would know this without udev also knowing it.\n\nThis isn\u0027t about another application adding an LED.  This is about another adding a sysfs-managed LED, since that is what this repository is about.  If someone comes up with a design where LEDs are not managed via sysfs, they\u0027d need to come up with a design for that.  Maybe at that point it would make sense to define a more globally applicable API?\n\n\u003e It was a convention long ago.  Is it still?  I\u0027m not sure.  I certainly don\u0027t advocate for it.\n\nCan you elaborate?  It doesn\u0027t seem like we\u0027ve made any recent suggestions to not do this.\n\n```\n$ for f in $(find -name regenerate-meson | grep -v sdbusplus) ; do git -C $(dirname $f) log regenerate-meson | grep Date: | tail -n1 ; done                      \nDate:   Wed Jun 24 16:12:44 2020 -0500\nDate:   Fri Apr 16 16:30:04 2021 -0500\nDate:   Tue Sep 13 11:20:56 2022 -0500\nDate:   Thu May 13 18:38:57 2021 -0700\nDate:   Wed Sep 8 08:46:22 2021 +0800\n```\n\n---\n\nJayashree is presently trying to keep backwards compatible support for the existing users (which used udev to create N independent processes), while also satisfying the design that was documented at https://gerrit.openbmc.org/c/openbmc/docs/+/55230 .",
      "parentUuid": "bf416bfc_bdb744ff",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b546213_730bd60e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-03T14:19:49Z",
      "side": 1,
      "message": "\u003e I think introducing the entire p-d-i code generation process to the building of this repository is a step backwards.  Just add your interface to PDI and drop \"Internal\" from the name.\n\nMaybe we need to define a light-weight way to add interfaces to PDI that are intended to be intra-repository?",
      "parentUuid": "22b846e1_e38a3253",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "733ac327_4d49719c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-03T15:41:42Z",
      "side": 1,
      "message": "\u003e It is public in the sense that anyone _could_ make calls to it, but if it is left undocumented and named as \"Internal\" it seems rather unlikely (and something we should be screening for in a code review).\n\nI don\u0027t think we should have undocumented interfaces or be screening for their use.  They should just be documented and allowed to be used, like any other interface.\n\n\u003e What other entity than udev would indicate that a new sysfs entry exists and should be managed by this application?  That\u0027s exactly what udev does.  I can\u0027t even think of a way you would know this without udev also knowing it.\n\nA developer application?  A testing application?  A manufacturing application?\nI\u0027m not sure.  Let me ask it another way - why does udev\u0027s use of this API make it special/internal compared to any other OpenBMC application.\n\n\u003e Can you elaborate?\n\nI don\u0027t really feel like digging through history to provide examples.  I know I have had conversations about this with others in the past.  I guess I\u0027ll just have to hope they are paying attention and speak up if they share my dislike of this practice.\n\n\u003e Jayashree is presently trying to keep backwards compatible support for the existing users \n\nI appreciate the effort to maintain backwards compatibility.\n\n\u003e Maybe we need to define a light-weight way to add interfaces to PDI that are intended to be intra-repository?\n\nI just don\u0027t see the point in the distinction.",
      "parentUuid": "9b546213_730bd60e",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5692a39_42af0e62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "\u003e Further, I think introducing the entire p-d-i code generation process to the building of this repository is a step backwards.  Just add your interface to PDI and drop \"Internal\" from the name.\n\nI disagree. We shouldn\u0027t be adding definitions to PDI that we don\u0027t want to consider part of the OpenBMC data model. If it\u0027s annoying to do per-repo stuff with sdbusplus we should fix that, not shoe-horn everything into PDI because it already makes life easy.\n\nI\u0027m just hoping I\u0027m not too far off with the trade-off between purism and pragmatism there.\n\n\u003e It was a convention long ago.  Is it still?  I\u0027m not sure.  I certainly don\u0027t advocate for it.\n\nIt\u0027s at least an established practice that \"Internal\" can be a component of an API name for object behaviours that are not for general consumption. If we have a beef with that then we should have a wider discussion about it, not try to change existing practice through commentary in Gerrit buried in some arbitrary patch. Let\u0027s get a proposal to docs or something on the mailing list if that\u0027s where we want to go and how to deal with existing APIs that fall afoul of the new philosophy.\n\n\u003e Why can\u0027t things other than udev add LEDs?\n\nThey could, but as Patrick points out that\u0027s really the only thing we care about for now, and the likelyhood of something else calling this interface is pretty low.\n\n\u003e A developer application?  A testing application?  A manufacturing application?\nI\u0027m not sure.  Let me ask it another way - why does udev\u0027s use of this API make it special/internal compared to any other OpenBMC application.\n\nI don\u0027t think this is the right question. udev\u0027s use of this API isn\u0027t special, and the API is also not named in terms of udev. It\u0027s not like it\u0027s called xyz.openbmc_project.LED.Udev. That said it\u0027s not an API that I think deserves representation in the OpenBMC data model either.\n\nOverall I\u0027m fine with the \u0027Internal\u0027 component given that it\u0027s existing practice, I\u0027m fine with defining the interface in this repository given that it\u0027s also existing practice, and I don\u0027t share concerns about things other than udev not being able to call it.\n\nIn the interest of moving this forward, I\u0027m happy for it to go in.",
      "parentUuid": "733ac327_4d49719c",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb0265e8_eb06a3b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "Hi Jayashree,\n\nThanks for continuing to plug away at this. I have a query about the need to commit the generated files, that doesn\u0027t quite seem right to me. Is that existing practice?\n\nI\u0027ve also weighed in on Brad\u0027s discussion.",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f90dc651_cb5267e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-07T15:52:17Z",
      "side": 1,
      "message": "Some good points Andrew.  Overall I think \"existing practice\" might be getting a more weight than it deserves as rationale (there are other projects in OpenBMC doing this in other ways) and I am slightly worried this will cause some teams in the community to look elsewhere for an LED solution.  However, I think everyone here is very smart and I\u0027m happy to get out of the way and hope I\u0027m wrong 🙂",
      "parentUuid": "c5692a39_42af0e62",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e62f6aa_5d88e915",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-10T01:00:04Z",
      "side": 1,
      "message": "I feel like I came in a bit hot there, so apologies for how it came across.\n\n\u003e (there are other projects in OpenBMC doing this in other ways)\n\nIt was handy that Patrick provided some links to demonstrate the use of Internal - can you provide some to demonstrate these alternatives? I am interested in whether it would change my position above.\n\n\u003e I am slightly worried this will cause some teams in the community to look elsewhere for an LED solution. \n\nCan you substantiate this worry a bit? Or can you strongly suggest that the people who are concerned comment here? I can\u0027t do anything but disregard the concern otherwise, there\u0027s nothing actionable I can take away from it. I don\u0027t have the bandwidth to invent my own solutions.",
      "parentUuid": "f90dc651_cb5267e0",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34fad5fe_8174d93e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-10-10T12:08:13Z",
      "side": 1,
      "message": "\u003e I feel like I came in a bit hot there, so apologies for how it came across.\n\nI didn\u0027t notice anything, so no worries.\n\n\u003e to demonstrate these alternatives\n\nAny asio application (these can be mixed with p-d-i fwiw).  Or, for non-asio, something like this:\nhttps://github.com/openbmc/phosphor-power/blob/master/phosphor-regulators/src/interfaces/manager_interface.cpp\n\n\u003e  I can\u0027t do anything but disregard the concern\n\nI understand.  And I think that is the right thing to do..I\u0027ve already consumed enough of everyone\u0027s time here.",
      "parentUuid": "1e62f6aa_5d88e915",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca6aaa59_afe5829a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-11T22:48:30Z",
      "side": 1,
      "message": "Patrick: Do you have concerns with the implementation strategy used by phosphor-power above? Given that it\u0027s a private interface, is there any reason to pick the generated-code method over the manual implementation? I see the generated-code method as a mechanism to control the specification of the interface as configuration rather than code, which makes it easier to review. That\u0027s nice for interfaces that are part of the core data model, but it\u0027s probably less important for interfaces that are private such as this one. Manual implementation means a lot fewer moving parts in the integration.",
      "parentUuid": "34fad5fe_8174d93e",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56788d89_3a6c11c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-11T23:18:22Z",
      "side": 1,
      "message": "\u003e Do you have concerns with the implementation strategy used by phosphor-power above? \n\nIt is up to you.  Generally I prefer the generated bindings because they give compile time guarantees of correctness (and I\u0027m working on the client side as well), but for a one-off inside a single repository that is obviously less useful.",
      "parentUuid": "ca6aaa59_afe5829a",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de0c942b_416457f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-12T02:27:26Z",
      "side": 1,
      "message": "Jayashree: I think I prefer the implementation approach demonstrated above in phosphor-power because it\u0027s a private interface and that approach requires fewer moving parts. Do you mind reworking this patch along those lines (note I think the rest of the issues are settled, its just the implementation approach)?",
      "parentUuid": "56788d89_3a6c11c5",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a8e28c_455adec5",
        "filename": "gen/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "If this is generated we probably shouldn\u0027t commit it? Is there some existing practice here?",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2c3e90_2ca7e422",
        "filename": "gen/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-10-06T08:16:44Z",
      "side": 1,
      "message": "I referred this yaml/gen file from phosphor-logging reposiory. I can remove this line, if this is not necessary in all the meson.build files.\nhttps://github.com/openbmc/phosphor-logging/blob/master/gen/meson.build",
      "parentUuid": "28a8e28c_455adec5",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c232415_0df875d6",
        "filename": "gen/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-06T09:55:29Z",
      "side": 1,
      "message": "It is expected convention to check these in even though they are generated. \n\nIn theory you could do a meson run-command at the top level to create them, but it would increase your [re]build times.  There was a discussion about it when all this gen-scriptage was written and wak was especially opposed to it being done as run-commands, so this is what we settled on.",
      "parentUuid": "4d2c3e90_2ca7e422",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "235917fb_44e37588",
        "filename": "gen/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T10:03:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8c232415_0df875d6",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6590f46d_cdbacbb1",
        "filename": "gen/xyz/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "Same query",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e92fb48b_15dcaca2",
        "filename": "gen/xyz/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6590f46d_cdbacbb1",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09045af0_b03f3fad",
        "filename": "gen/xyz/openbmc_project/Led/Internal/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "Same query",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e82ddef3_68d41439",
        "filename": "gen/xyz/openbmc_project/Led/Internal/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09045af0_b03f3fad",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7a034f1_eb6addec",
        "filename": "gen/xyz/openbmc_project/Led/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "Same query",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85ca9833_ccff8076",
        "filename": "gen/xyz/openbmc_project/Led/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7a034f1_eb6addec",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51dd9bcb_5f96b55d",
        "filename": "gen/xyz/openbmc_project/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T03:46:49Z",
      "side": 1,
      "message": "Same query",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3539d13_0b073cf2",
        "filename": "gen/xyz/openbmc_project/meson.build",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-10-06T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51dd9bcb_5f96b55d",
      "revId": "d361bb7322f9ca4efede70653bef084ba0e5c695",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}