{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c0add71f_f4dfa6e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "We need to get buy-in from maintainers of other platforms that were using it in the original method. We need broader testing than just YosemiteV2.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 60
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d47d3c_44a34c7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "Sure, I am only able to test in YosemiteV2 platform. If possible, could you please help to test in other platforms where this implementation is used.",
      "parentUuid": "c0add71f_f4dfa6e9",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 60
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8096a2fa_b26d6186",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "Hi Jayashree,\n\nI have a few comments and queries. You need a change to stop the udev invocation of the service as well right? Is there a patch somewhere for that (can you link to it?) I\u0027m interested in how that patch allows phosphor-led-sysfs to continue working on existing systems using it without migrating them to EntityManager.",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a28b6bf7_61337592",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:32:53Z",
      "side": 1,
      "message": "In existing platforms, migration needs to be done from udev rule to entity-manager configuration inorder to support the physical LEDs.\n\nThe below patch is submitted for meta-phosphor change.\n\nhttps://gerrit.openbmc.org/c/openbmc/openbmc/+/56947",
      "parentUuid": "8096a2fa_b26d6186",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c420c10_76efce23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Not all systems use entity-manager.  I\u0027d prefer we find a mechanism to still inform the daemon of new LEDs via udev.  There is no reason to lean entirely on entity-manager for this, especially since there can be lag between the entity-manager config and the device probing to enable the appropriate GPIOs / LEDs.",
      "parentUuid": "a28b6bf7_61337592",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a21408_9a1e9fbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-05T23:35:09Z",
      "side": 1,
      "message": "Right, I think we need to split up the patches adding any EM support so that the daemon can still work without EM. This necessitates leaving some udev support in-place. One way that this might work is that udev runs a helper executable that calls a DBus API on the phosphor-led-sysfs daemon to add a new LED. This helper could be some C++-based binary or just a shell script that invokes busctl. phosphor-led-sysfs can then funnel actions from EM or udev into the one handler implementation.\n\nIt\u0027s possible that with this approach you could implement what you need without any EM bits required, and we can kick that can down the road until we need to describe add-in cards with LEDs.\n\nI feel like I suggested this (and EM) on the design doc some time back? I think I leaned the EM way because it is more general, but I don\u0027t think I ever suggested we drop the current udev mechanism.",
      "parentUuid": "4c420c10_76efce23",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94a7ef10_da497c89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "phosphor-led-sysfs daemon needs to support both udev and EM configs mechanism.\n\nudev event needs to support physical LEDs, therefore, it will not break the existing platform. udev rule can invoke the phosphor-led-sysfs daemon through script/binary by calling DBus API under single service.\n\nEM config can also be supported to create physical LEDs dbus path under single service and not disturbing udev event.\n\nIs my above understanding is correct ?",
      "parentUuid": "19a21408_9a1e9fbe",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f29bf1_1ce9a5a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-07T00:03:26Z",
      "side": 1,
      "message": "Yes, we need to at least retain udev support to prevent breaking existing platforms that use phosphor-led-sysfs in its current implementation.\n\nEM support is something you can add if you need EM; this will give you the capability to describe LEDs on pluggable cards (which you shouldn\u0027t do via the devicetree).",
      "parentUuid": "94a7ef10_da497c89",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e03f7ba1_1dddf579",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "ok, I will work on phosphor-led-sysfs daemon to support both udev and entity-manager and submit the patch as soon as possible.",
      "parentUuid": "76f29bf1_1ce9a5a8",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eebdf66d_61f8d58f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-16T03:52:36Z",
      "side": 1,
      "message": "Just to be clear, only add EM support if you need it. It\u0027s possible to rework the udev support consolidate the processes without requiring EM while also being backwards compatible with existing systems. And if that\u0027s enough to get your problems solved, then we can leave EM support to someone else.",
      "parentUuid": "e03f7ba1_1dddf579",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a237040_54f0774c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-16T10:44:26Z",
      "side": 1,
      "message": "\u003e And if that\u0027s enough to get your problems solved, then we can leave EM support to someone else.\n\nFundamentally what we\u0027re looking for is a way to combine N GPIOs into 1 LED (with color).  If we can do that in an automatic way (based on name) we don\u0027t need EM.  If you (Andrew) are opposed to doing that in an automated way, we need EM to specify the composition.",
      "parentUuid": "eebdf66d_61f8d58f",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164b275b_7d61688b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-16T12:39:16Z",
      "side": 1,
      "message": "The design doc is now updated to support udev event and entity-manager is not required now, since LEDs are configured in existing platforms via devicetree",
      "parentUuid": "eebdf66d_61f8d58f",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2faa422_ca806db7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2022-09-19T14:18:59Z",
      "side": 1,
      "message": "This is a drive by comment - I\u0027m not looking for any changes.\n\n\u003e automatic way (based on name)\n\nIs it any more automatic to require specific naming conventions in the device tree?\n\nAdditionally, EM configurations can already have schema verification applied.\n\nFWIW, one of the goals of entity manager is to consolidate where this kind of information lives, to make new system ports easier.",
      "parentUuid": "164b275b_7d61688b",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8f0fcdf_765c26f5",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Why not unordered_map?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 26
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61a5bce8_cb3ccb7d",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b8f0fcdf_765c26f5",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 26
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c8e5183_cba6945c",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61a5bce8_cb3ccb7d",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 26
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19d37b8a_2b14915e",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Why are we using std::error instead of phosphor-logging?  Who is expected to ever see these messages?  Are there any cases where we should be throwing an exception instead and causing the application to restart?  I suspect we have a bunch of instances in this change where bad entity-manager config just goes silently unnoticed until someone really digs into their system.  This is not a good approach to me.",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02eee796_3b0960f6",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "19d37b8a_2b14915e",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "806dd811_4e45de42",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02eee796_3b0960f6",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1396d2a8_5464098f",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Why is this static_cast necessary?  Isn\u0027t that already the type?",
      "range": {
        "startLine": 98,
        "startChar": 8,
        "endLine": 98,
        "endChar": 42
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787e21a7_903414c3",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1396d2a8_5464098f",
      "range": {
        "startLine": 98,
        "startChar": 8,
        "endLine": 98,
        "endChar": 42
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0edcf707_5f72ae44",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "787e21a7_903414c3",
      "range": {
        "startLine": 98,
        "startChar": 8,
        "endLine": 98,
        "endChar": 42
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92411eac_ef044919",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "It looks like now we are only adding exactly 1 match, so why do we need the unique_ptr and vector and everything?  Can\u0027t we hold a match_t directly in the object?",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22084998_d120f783",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "92411eac_ef044919",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdfaeabc_24994773",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22084998_d120f783",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9221b0a4_2f7e7b26",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "A minor improvement:\n\nauto [path, interfaces] \u003d message.unpack\u003cobject_path, LedData\u003e();",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f83c58_dd32dd0d",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9221b0a4_2f7e7b26",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b83d29f_f7a2b425",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "const auto\u0026?  At least auto\u0026.",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0134642_56327406",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7b83d29f_f7a2b425",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0ae2e7_89e577b3",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0134642_56327406",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d96f435f_0bdd11db",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000907
      },
      "writtenOn": "2022-08-30T17:24:34Z",
      "side": 1,
      "message": "I guess std::get\u003c\u003e() can throw an exception.\nPossible to use std::get_if\u003c\u003e() instead ?",
      "range": {
        "startLine": 119,
        "startChar": 27,
        "endLine": 119,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6f82e8_78279668",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d96f435f_0bdd11db",
      "range": {
        "startLine": 119,
        "startChar": 27,
        "endLine": 119,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8cf7cdd_f98f05d1",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Or check `findName-\u003esecond.holds_alternative`.",
      "parentUuid": "1c6f82e8_78279668",
      "range": {
        "startLine": 119,
        "startChar": 27,
        "endLine": 119,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33598dcc_f325174a",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c8cf7cdd_f98f05d1",
      "range": {
        "startLine": 119,
        "startChar": 27,
        "endLine": 119,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cd2b46b_12242d66",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "There is a whole lot of work being done here that is not necessary.\n\n1. getDbusName formulates the last part of the path from the device/color/function, but we already did that on line 135.\n2. sdbusplus already has operations to do path transformation to ensure that only valid characters are used.\n\nPlease use sdbusplus::object_path and its `operator /\u003d` in order to put together the path, so that the correct transformations are used.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a20140_23f5a184",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7cd2b46b_12242d66",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "657df02d_80af7aaf",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7a20140_23f5a184",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d6c699_9b39d50f",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "Do we really need a std::unique_ptr here? Also why can\u0027t we embed the objects directly in the map? And then just use an emplace() style call?",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b75e3c89_2992cb25",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1d6c699_9b39d50f",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a69d6162_eaefb4ff",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b75e3c89_2992cb25",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "627a322d_a85f5c92",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "I think we moved away from creating object managers at the root. I\u0027ve asked here: https://discord.com/channels/775381525260664832/867820390406422538/1014753835643842601",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea3ae0c_f2ce90c9",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "I have seen the discussions in discord. Whether can we change from root(\"/\") to \"/xyz/openbmc_project/led\" for creating object managers ?",
      "parentUuid": "627a322d_a85f5c92",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "956903be_4d1a10fe",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Yes, whatever the first path is after openbmc_project for the objects that this daemon will create.",
      "parentUuid": "6ea3ae0c_f2ce90c9",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d84ada2_d85e30cb",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "956903be_4d1a10fe",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0bcd706_dc0c3912",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d84ada2_d85e30cb",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5de8bb7c_ef4daf0c",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "There is no need for sdeventplus here.  It is a bunch of extra code and dependency for no good reason.  Just use bus::process_loop().\n\n\nI don\u0027t understand why you even added this.  The original code worked just fine with the while-loop.  All bus.process_loop() is is exactly the while loop that previously existed.",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 200,
        "endChar": 17
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6f021eb_a78b60ca",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5de8bb7c_ef4daf0c",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 200,
        "endChar": 17
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed86933c_b3240ca2",
        "filename": "controller.cpp",
        "patchSetId": 1
      },
      "lineNbr": 200,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6f021eb_a78b60ca",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 200,
        "endChar": 17
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9659c5b_3e89f0d2",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "I\u0027m not finding these used anywhere, but I could be failing to search in Gerrit.\n\nWhy are these flat_map instead of std::unordered_map?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 16,
        "endChar": 73
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d45b95_0e56fda3",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "These are used to handle the sdbusplus message. flat_map is used based on the reference in other repos. I will change to std::unordered_map in next patchset.",
      "parentUuid": "b9659c5b_3e89f0d2",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 16,
        "endChar": 73
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a754388e_1f295489",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "Let\u0027s drop \u0027Sysfs\u0027 here. `...Configuration.Led` (or LED, whatever the convention is) is enough.\n\nRegardless, you need to propose a new schema for EntityManager and get that merged before we can merge this patch.",
      "range": {
        "startLine": 23,
        "startChar": 39,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a65a5252_87d4ba03",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "Ack\n\nWill submit a new patch for LED schema in entity-manager.",
      "parentUuid": "a754388e_1f295489",
      "range": {
        "startLine": 23,
        "startChar": 39,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a7343dd_f51e7a35",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "\u003e Let\u0027s drop \u0027Sysfs\u0027 here. `...Configuration.Led` (or LED, whatever the convention is) is enough.\n\nExcept there is a difference between the physical LED config and the virtual groups, right?  How do we ensure that people understand the difference?  I don\u0027t know if \"Configuration.Led\" is sufficient.",
      "parentUuid": "a65a5252_87d4ba03",
      "range": {
        "startLine": 23,
        "startChar": 39,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27c3ba77_153bfa99",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-05T23:35:09Z",
      "side": 1,
      "message": "Maybe \"Configuration.Led\" isn\u0027t sufficient, but I feel like it\u0027s wrong to embed implementation details like \"sysfs\" into the API? Do we need \"Configuration.Led\" and \"Configuration.VirtualLed\" or \"Configuration.ComposedLed\"?",
      "parentUuid": "3a7343dd_f51e7a35",
      "range": {
        "startLine": 23,
        "startChar": 39,
        "endLine": 23,
        "endChar": 44
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2206750c_8bceb23d",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "add explicit",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49ecaa41_f22f85ff",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2206750c_8bceb23d",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20d7c5cc_42ec2ec3",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49ecaa41_f22f85ff",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec01de55_d1d851f5",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "const std::string\u0026?",
      "range": {
        "startLine": 52,
        "startChar": 23,
        "endLine": 52,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e00c185_bc59bebb",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ec01de55_d1d851f5",
      "range": {
        "startLine": 52,
        "startChar": 23,
        "endLine": 52,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77345585_39fbefbe",
        "filename": "controller.hpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e00c185_bc59bebb",
      "range": {
        "startLine": 52,
        "startChar": 23,
        "endLine": 52,
        "endChar": 35
      },
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3317020c_43d9b27c",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "I see no use for this being added.",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1b35863_c39a8aac",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3317020c_43d9b27c",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b9b7d9e_e3a2af6b",
        "filename": "meson.build",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1b35863_c39a8aac",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13e5b1ae_9a35910f",
        "filename": "physical.hpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-01T04:43:22Z",
      "side": 1,
      "message": "Can you separate this bit out into its own patch? That will clean up the noise.\n\nThat said, how does the test suite fair with this?\n\nLooking at the Jenkins output, it blows up:\n\n FAILED: test/physical_cpp.p/physical.cpp.o \n c++ -Itest/physical_cpp.p -Itest -I../test -I. -I.. -I/usr/local/include -fdiagnostics-color\u003dnever -D_FILE_OFFSET_BITS\u003d64 -Wall -Winvalid-pch -Wnon-virtual-dtor -Wextra -Wpedantic -Werror -std\u003dc++20 -O0 -g -DBOOST_ASIO_DISABLE_THREADS -DBOOST_ALL_NO_LIB -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_ERROR_CODE_HEADER_ONLY -DBOOST_COROUTINES_NO_DEPRECATION_WARNING -DGTEST_HAS_PTHREAD\u003d1 -MD -MQ test/physical_cpp.p/physical.cpp.o -MF test/physical_cpp.p/physical.cpp.o.d -o test/physical_cpp.p/physical.cpp.o -c ../test/physical.cpp\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_none_trigger_Test::TestBody()’:\n ../test/physical.cpp:79:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n    79 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_maxbrightness_and_brightness_read_127_Test::TestBody()’:\n ../test/physical.cpp:91:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n    91 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_maxbrightness_and_brightness_read_0_Test::TestBody()’:\n ../test/physical.cpp:103:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   103 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_only_maxbrightness_read_127_Test::TestBody()’:\n ../test/physical.cpp:115:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   115 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_only_brightness_read_127_Test::TestBody()’:\n ../test/physical.cpp:127:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   127 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_timer_trigger_Test::TestBody()’:\n ../test/physical.cpp:138:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   138 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_off_Test::TestBody()’:\n ../test/physical.cpp:150:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   150 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_on_Test::TestBody()’:\n ../test/physical.cpp:165:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   165 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_blink_Test::TestBody()’:\n ../test/physical.cpp:178:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   178 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_ctor_none_trigger_asserted_brightness_Test::TestBody()’:\n ../test/physical.cpp:189:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   189 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n ../test/physical.cpp: In member function ‘virtual void Physical_on_to_off_Test::TestBody()’:\n ../test/physical.cpp:206:50: error: no matching function for call to ‘phosphor::led::Physical::Physical(sdbusplus::bus::bus\u0026, const char* const\u0026, testing::NiceMock\u003cMockLed\u003e\u0026)’\n   206 |     phosphor::led::Physical phy(bus, LED_OBJ, led);\n       |                                                  ^\n In file included from ../test/physical.cpp:1:\n ../physical.hpp:51:5: note: candidate: ‘phosphor::led::Physical::Physical(sdbusplus::bus_t\u0026, const string\u0026, std::filesystem::__cxx11::path\u0026\u0026, const string\u0026)’\n    51 |     Physical(sdbusplus::bus_t\u0026 bus, const std::string\u0026 objPath,\n       |     ^~~~~~~~\n ../physical.hpp:52:25: note:   no known conversion for argument 3 from ‘testing::NiceMock\u003cMockLed\u003e’ to ‘std::filesystem::__cxx11::path\u0026\u0026’\n    52 |              fs::path\u0026\u0026 rootPath, const std::string\u0026 color \u003d \"\") :\n       |              ~~~~~~~~~~~^~~~~~~~\n \n [10/12] Compiling C++ object phosphor-ledcontroller.p/controller.cpp.o",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc46cb8d_79957f9e",
        "filename": "physical.hpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-02T12:07:14Z",
      "side": 1,
      "message": "\u003e Can you separate this bit out into its own patch? That will clean up the noise.\n\u003e \n\nWill submit a new patch for this.\n\n\n\n\u003e That said, how does the test suite fair with this?\n\u003e \n\u003e Looking at the Jenkins output, it blows up:\n\nI am working on resolving test suite for this implementation. Will change the test suite once it is completed.",
      "parentUuid": "13e5b1ae_9a35910f",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42e123ab_6dfe07b8",
        "filename": "subprojects/sdeventplus.wrap",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-09-02T13:48:27Z",
      "side": 1,
      "message": "Not needed.",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb2dd84_0b1194eb",
        "filename": "subprojects/sdeventplus.wrap",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-06T09:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "42e123ab_6dfe07b8",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a003a130_90fdc155",
        "filename": "subprojects/sdeventplus.wrap",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-09-09T10:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcb2dd84_0b1194eb",
      "revId": "a87b190350b5a192902451df80c396ae84489f35",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}